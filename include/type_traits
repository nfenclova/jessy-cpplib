#ifndef JESSY_CPPLIB_TYPE_TRAITS
#define JESSY_CPPLIB_TYPE_TRAITS

namespace std
{

  template<typename ValueType, ValueType Value>
  struct integral_constant
  {
    using value_type = ValueType;
    using type = integral_constant;

    auto constexpr static value = Value;

    constexpr operator value_type() const noexcept
    {
      return value;
    }

    auto constexpr operator()() const noexcept -> value_type
    {
      return value;
    }
  };

  template<bool Value>
  using bool_constant = integral_constant<bool, Value>;

  using false_type = integral_constant<bool, false>;
  using true_type = integral_constant<bool, true>;

  template<typename LType, typename RType>
  struct is_same : false_type
  {
  };

  template<typename Type>
  struct is_same<Type, Type> : true_type
  {
  };

  template<typename LType, typename RType>
  using is_same_t = typename is_same<LType, RType>::type;

  template<typename LType, typename RType>
  constexpr bool is_same_v = is_same_t<LType, RType>{};

  template<typename Type>
  struct remove_reference
  {
    using type = Type;
  };
  template<typename Type>
  struct remove_reference<Type &>
  {
    using type = Type;
  };
  template<typename Type>
  struct remove_reference<Type &&>
  {
    using type = Type;
  };

  template<typename Type>
  using remove_reference_t = typename remove_reference<Type>::type;

  namespace impl::type_traits
  {
    struct size_two
    {
      char filler[2]{};
    };

    struct is_referenceable_test
    {
      template<typename Type>
      static Type & test(int);

      template<typename Type>
      static size_two test(...);
    };

    template<typename Type>
    struct is_referenceable
        : integral_constant<
              bool,
              !is_same_v<decltype(impl::type_traits::is_referenceable_test::test<Type>(0)), impl::type_traits::size_two>>
    {
    };

    template<typename Type>
    constexpr bool is_referenceable_v = is_referenceable<Type>{};

    template<typename Type, bool = is_referenceable_v<Type>>
    struct add_rvalue_reference_select
    {
      using type = Type;
    };

    template<typename Type>
    struct add_rvalue_reference_select<Type, true>
    {
      using type = Type &&;
    };
  }  // namespace impl::type_traits

  template<typename Type>
  struct add_rvalue_reference : impl::type_traits::add_rvalue_reference_select<Type>
  {
  };

  template<typename Type>
  using add_rvalue_reference_t = typename add_rvalue_reference<Type>::type;

  namespace impl::type_traits
  {
    template<typename Type, bool = is_referenceable_v<Type>>
    struct add_lvalue_reference_select
    {
      using type = Type;
    };

    template<typename Type>
    struct add_lvalue_reference_select<Type, true>
    {
      using type = Type &;
    };
  }  // namespace impl::type_traits

  template<typename Type>
  struct add_lvalue_reference : impl::type_traits::add_lvalue_reference_select<Type>
  {
  };

  template<typename Type>
  using add_lvalue_reference_t = typename add_lvalue_reference<Type>::type;

  template<typename Type>
  struct underlying_type
  {
    using type = __underlying_type(Type);
  };

  template<typename Type>
  using underlying_type_t = typename underlying_type<Type>::type;

}  // namespace std

#endif
